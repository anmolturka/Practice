1.  a)  The methods in SortedList do not have access to Node::value and 
        Node::private.
    b)  19: error: 'free' was not declared in this scope.
    c)  SortList does not have a constructor.
    d)  All of the SortedList methods rely on having m_head and yet, it's never
        assigned with any values.
    e)  The while loop inside of the Size() method is missing curly braces.
    

2.  i)  Currently, Size() runs at O(n). Instead of having Size() as a method, 
        adding an int size variable in SortedList class, increment by 1 in Push, decrement by 1 in Pop will reduce the runtime to O(1). 
    ii) The program should check for an empty list
    iii)Currently, Push has a runtime complexity of O(n). This can be reduced 
        to O(log(n)) if we change the data structure to binary heap instead of using a linked list. The only downside of this approach is that Pop()
        will also become O(log(n)) instead of it being O(1).
    
3.  a)  Changed the Node class contents to public.
    b)  Changed 'free' to 'delete'.
    c)  Added a SortList constructor.
    d)  Changed SortedList to initialize and assign m_head.
    e)  Added curly braces around ++size; p = p->next; inside of the while loop
        in the Size() method.
    i)  Size() now returns the size variable which is incremented/decremented
        accordingly.
    ii) Push will now add a Node with a value, and NULL to next if the
        SortedList is empty. Pop will output an error message if the SortedList
        is empty.
    iii)Implemented binary heap.

4.  I am going to assume that the most important features in a priority queue
    are Push and Pop, since the definition of a priority queue is returning the
    top (or least) prioritized element. With this assumption, binary heap would be one of the best data structure to use; however, if Find and Remove were 
    just as important, binary search tree would be a better choice. 

    Find will return the index of the first matching element. By using 
    recursive depth-first pre-order search, we can avoid searching sub-trees
    where their values are greater than the value we are searching for. Find
    will return 0 if the value is not found in the SortedList.

    Remove will remove the first matching element and restore the heap property.


    * Pop should have else statement after if
    * check *where != NULL
    * could have made value and next private, and created get functions for them