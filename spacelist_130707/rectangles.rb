# Given a square with the side length L and N rectangles with a width W# and a height H, write a fuction that computes and prints the minimum value# for L such that all N rectangles can fit inside the square.# # Note that your function will receive the following arguments:# n: which is the number of rectangles that much fit inside the square# w: which is the width of one of the rectangles# h: which is the height of one of the rectangles# # Data constraints# The H and W values will not exceed 100000# The N value will not exceed 400000000# # Efficiency contraints# Your fuction is expected to print the result in less than 2 seconds# # Example# Input: n = 8, w = 1, h = 3# Output: 6def rectangles(n, w, h)	if h > 100000 || w > 100000 || n > 400000000		return "Error: Exceeds Data Constraints"	else		l = w if w >= h		l = h if h > w				count = 0		while count <= n do			count = 0			nw = (l / w).floor			nh = (l / h).floor			count += nw * nh			lw = l			lh = l - nh * h			if lh >= 0				nw = (lw / h).floor				nh = (lh / w).floor				count += nw * nh			end		#puts "l: #{l}  count: #{count}  lw: #{lw}  lh: #{lh}  nw: #{nw}  nh: #{nh}"		l += 1	end	l -= 1endendputs rectangles(8, 1, 3)puts rectangles(400000000, 2, 3)